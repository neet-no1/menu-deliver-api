/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.19-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package jp.co.suyama.menu.deliver.controller.interfaces;

import jp.co.suyama.menu.deliver.model.auto.AnswersResponse;
import jp.co.suyama.menu.deliver.model.auto.BasicResponse;
import jp.co.suyama.menu.deliver.model.auto.BestAnswerResponse;
import jp.co.suyama.menu.deliver.model.auto.DecideBestAnswerParam;
import jp.co.suyama.menu.deliver.model.auto.QuestionCategoriesResponse;
import jp.co.suyama.menu.deliver.model.auto.QuestionDataResponse;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-03-24T14:39:40.139+09:00")

@Validated
@Api(value = "question", description = "the question API")
@RequestMapping(value = "")
public interface QuestionApi {

    @ApiOperation(value = "回答投稿", nickname = "answerQuestion", notes = "質問に対する回答を投稿する 認証必須 ", response = BasicResponse.class, tags={ "Question", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "通信成功時の返却値", response = BasicResponse.class),
        @ApiResponse(code = 400, message = "200以外の時のは通信失敗をクライアントに通達") })
    @RequestMapping(value = "/question/answer",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<BasicResponse> answerQuestion(@ApiParam(value = "内容", required=true) @RequestParam(value="contents", required=true)  String contents,@ApiParam(value = "質問内容の画像") @Valid @RequestPart(value="file", required=true) MultipartFile file);


    @ApiOperation(value = "ベストアンサー決定", nickname = "decideBestAnswer", notes = "ベストアンサーを決定する 認証必須 ", response = BasicResponse.class, tags={ "Question", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "通信成功時の返却値", response = BasicResponse.class),
        @ApiResponse(code = 400, message = "200以外の時のは通信失敗をクライアントに通達") })
    @RequestMapping(value = "/question/bestanswer",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BasicResponse> decideBestAnswer(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DecideBestAnswerParam decideBestAnswerParam);


    @ApiOperation(value = "回答一覧取得", nickname = "getAnswers", notes = "質問の回答一覧を取得する 認証不要 ", response = AnswersResponse.class, tags={ "Question", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "通信成功時の返却値", response = AnswersResponse.class),
        @ApiResponse(code = 400, message = "200以外の時のは通信失敗をクライアントに通達") })
    @RequestMapping(value = "/question/answers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AnswersResponse> getAnswers(@NotNull @ApiParam(value = "質問ID", required = true) @Valid @RequestParam(value = "id", required = true) String id);


    @ApiOperation(value = "ベストアンサー取得", nickname = "getBestAnswer", notes = "ベストアンサーが存在するか、しないか 存在する場合は回答IDを取得する 認証不要 ", response = BestAnswerResponse.class, tags={ "Question", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "通信成功時の返却値", response = BestAnswerResponse.class),
        @ApiResponse(code = 400, message = "200以外の時のは通信失敗をクライアントに通達") })
    @RequestMapping(value = "/question/bestanswer",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<BestAnswerResponse> getBestAnswer(@NotNull @ApiParam(value = "質問ID", required = true) @Valid @RequestParam(value = "id", required = true) String id);


    @ApiOperation(value = "質問内容取得", nickname = "getQuestion", notes = "質問の内容と回答の一覧を取得する 投稿日順に取得する 認証不要 ", response = QuestionDataResponse.class, tags={ "Question", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "通信成功時の返却値", response = QuestionDataResponse.class),
        @ApiResponse(code = 400, message = "200以外の時のは通信失敗をクライアントに通達") })
    @RequestMapping(value = "/question",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<QuestionDataResponse> getQuestion(@NotNull @ApiParam(value = "質問ID", required = true) @Valid @RequestParam(value = "id", required = true) String id);


    @ApiOperation(value = "質問カテゴリ取得", nickname = "getQuestionCategories", notes = "質問のカテゴリ一覧を取得する 認証不要 ", response = QuestionCategoriesResponse.class, tags={ "Question", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "通信成功時の返却値", response = QuestionCategoriesResponse.class),
        @ApiResponse(code = 400, message = "200以外の時のは通信失敗をクライアントに通達") })
    @RequestMapping(value = "/question/categories",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<QuestionCategoriesResponse> getQuestionCategories();


    @ApiOperation(value = "質問投稿", nickname = "postQuestion", notes = "質問を投稿する 認証必須 ", response = BasicResponse.class, tags={ "Question", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "通信成功時の返却値", response = BasicResponse.class),
        @ApiResponse(code = 400, message = "200以外の時のは通信失敗をクライアントに通達") })
    @RequestMapping(value = "/question",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<BasicResponse> postQuestion(@ApiParam(value = "内容", required=true) @RequestParam(value="contents", required=true)  String contents,@ApiParam(value = "質問内容の画像") @Valid @RequestPart(value="file", required=true) MultipartFile file);

}
